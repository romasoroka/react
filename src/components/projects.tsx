import { useState } from 'react';
import { FaSearch, FaTimes } from 'react-icons/fa';
import './projects.css';

interface Project {
  id: number;
  name: string;
  status: string;
  technologies: string[];
  description: string;
  programmers: string[];
  startDate: string;
  endDate: string;
  budget: string;
  client: string;
  detailedDescription: string;
}

const initialProjects: Project[] = [
  {
    id: 1,
    name: 'E-Commerce Platform',
    status: 'Active',
    technologies: ['React', 'TypeScript', 'Node.js', 'MongoDB'],
    description: '–û–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É —Ç–æ–≤–∞—Ä—ñ–≤ —ñ–∑ —Å—É—á–∞—Å–Ω–∏–º –¥–∏–∑–∞–π–Ω–æ–º.',
    programmers: ['–û–ª–µ–≥ –ü–µ—Ç—Ä–µ–Ω–∫–æ', '–ú–∞—Ä—ñ—è –Ü–≤–∞–Ω–æ–≤–∞'],
    startDate: '2025-01-15',
    endDate: '2025-07-30',
    budget: '$50,000',
    client: 'ShopEasy Inc.',
    detailedDescription:
      '–¶–µ–π –ø—Ä–æ—î–∫—Ç —Å–ø—Ä—è–º–æ–≤–∞–Ω–∏–π –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤–Ω–æ—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—ó –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –∫–æ–º–µ—Ä—Ü—ñ—ó –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –±–∞–≥–∞—Ç–æ–º–æ–≤–Ω–æ—Å—Ç—ñ, —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é Stripe —Ç–∞ PayPal, –∞ —Ç–∞–∫–æ–∂ –∞–Ω–∞–ª—ñ—Ç–∏–∫–æ—é –¥–ª—è –≤–ª–∞—Å–Ω–∏–∫—ñ–≤ –±—ñ–∑–Ω–µ—Å—É.',
  },
  {
    id: 2,
    name: 'Task Management App',
    status: 'In Progress',
    technologies: ['Vue.js', 'Firebase', 'Tailwind CSS'],
    description: '–î–æ–¥–∞—Ç–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏ –∑ –∫–æ–º–∞–Ω–¥–Ω–æ—é —Ä–æ–±–æ—Ç–æ—é.',
    programmers: ['–Ü–≥–æ—Ä –°–∏–¥–æ—Ä–µ–Ω–∫–æ', '–ê–Ω–Ω–∞ –ö–æ–≤–∞–ª–µ–Ω–∫–æ', '–ü–∞–≤–ª–æ –ó–∞–π—Ü–µ–≤'],
    startDate: '2025-03-01',
    endDate: '2025-09-15',
    budget: '$30,000',
    client: 'TeamSync Ltd.',
    detailedDescription:
      '–î–æ–¥–∞—Ç–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏ –∑ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ Kanban-–¥–æ—à–∫–∏, —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é –∑ Google Calendar —Ç–∞ —Ä–µ–∞–ª—å–Ω–∏–º —á–∞—Å–æ–º –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—ñ–≤ –∑–∞–≤–¥–∞–Ω—å.',
  },
  {
    id: 3,
    name: 'AI Chatbot',
    status: 'Completed',
    technologies: ['Python', 'TensorFlow', 'Next.js'],
    description: '–†–æ–∑—É–º–Ω–∏–π —á–∞—Ç-–±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤.',
    programmers: ['–î–º–∏—Ç—Ä–æ –®–µ–≤—á–µ–Ω–∫–æ', '–û–ª–µ–Ω–∞ –õ–∏—Ç–≤–∏–Ω'],
    startDate: '2024-06-01',
    endDate: '2024-12-20',
    budget: '$40,000',
    client: 'SmartTalk Co.',
    detailedDescription:
      'AI-—á–∞—Ç-–±–æ—Ç —ñ–∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –æ–±—Ä–æ–±–∫–∏ –ø—Ä–∏—Ä–æ–¥–Ω–æ—ó –º–æ–≤–∏ (NLP) –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –∑–∞–ø–∏—Ç—ñ–≤ –∫–ª—ñ—î–Ω—Ç—ñ–≤. –Ü–Ω—Ç–µ–≥—Ä—É—î—Ç—å—Å—è –∑ CRM-—Å–∏—Å—Ç–µ–º–∞–º–∏.',
  },
];

const Projects = () => {

  const [searchQuery, setSearchQuery] = useState('');
  const [selectedProject, setSelectedProject] = useState<Project | null>(null);
  const [projects, setProjects] = useState(initialProjects);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [newProject, setNewProject] = useState({
    name: '',
    status: 'Active',
    technologies: '',
    description: '',
    programmers: '',
    startDate: '',
    endDate: '',
    budget: '',
    client: '',
    detailedDescription: '',
  });

  const filteredProjects = projects.filter((project) =>
    project.name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const openModal = (project: Project) => {
    setSelectedProject(project);
  };

  const closeModal = () => {
    setSelectedProject(null);
  };

  const openCreateModal = () => {
    setShowCreateModal(true);
  };

  const closeCreateModal = () => {
    setShowCreateModal(false);
    setNewProject({
      name: '',
      status: 'Active',
      technologies: '',
      description: '',
      programmers: '',
      startDate: '',
      endDate: '',
      budget: '',
      client: '',
      detailedDescription: '',
    });
  };

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = event.target;
    setNewProject({ ...newProject, [name]: value });
  };

  const createProject = (event: React.FormEvent) => {
    event.preventDefault();
    const newId = projects.length + 1; 
    const project: Project = {
      id: newId,
      name: newProject.name,
      status: newProject.status,
      technologies: newProject.technologies.split(',').map((t) => t.trim()),
      description: newProject.description,
      programmers: newProject.programmers.split(',').map((p) => p.trim()),
      startDate: newProject.startDate,
      endDate: newProject.endDate,
      budget: newProject.budget,
      client: newProject.client,
      detailedDescription: newProject.detailedDescription,
    };
    setProjects([...projects, project]);
    closeCreateModal();
  };

  return (
    <div className="projects-page">
      <h2 className="page-title">üíº Projects</h2>
      <div className="search-bar">
        <FaSearch className="search-icon" />
        <input
          type="text"
          placeholder="–ü–æ—à—É–∫ –ø—Ä–æ—î–∫—Ç—ñ–≤ –∑–∞ –Ω–∞–∑–≤–æ—é..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="search-input"
        />
      </div>
      <button className="create-project-button" onClick={openCreateModal}>
        –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—î–∫—Ç
      </button>
      <div className="projects-grid">
        {filteredProjects.length > 0 ? (
          filteredProjects.map((project) => (
            <div key={project.id} className="project-card" onClick={() => openModal(project)}>
              <h3 className="project-title">{project.name}</h3>
              <p className="project-description">{project.description}</p>
              <span className={`project-status status-${project.status.toLowerCase().replace(' ', '-')}`}>
                {project.status}
              </span>
              <div className="project-technologies">
                {project.technologies.map((tech, index) => (
                  <span key={index} className="tech-tag">
                    {tech}
                  </span>
                ))}
              </div>
              <div className="project-programmers">
                {project.programmers.map((programmer, index) => (
                  <span key={index} className="programmer-tag">
                    {programmer}
                  </span>
                ))}
              </div>
            </div>
          ))
        ) : (
          <p className="no-results">–ü—Ä–æ—î–∫—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</p>
        )}
      </div>

      {selectedProject && (
        <div className="modal-overlay" onClick={closeModal}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <button className="modal-close" onClick={closeModal}>
              <FaTimes size={20} />
            </button>
            <h2 className="modal-title">{selectedProject.name}</h2>
            <div className="modal-section">
              <span className="modal-label">–°—Ç–∞—Ç—É—Å:</span>
              <span className={`project-status status-${selectedProject.status.toLowerCase().replace(' ', '-')}`}>
                {selectedProject.status}
              </span>
            </div>
            <div className="modal-section">
              <span className="modal-label">–û–ø–∏—Å:</span>
              <p className="modal-description">{selectedProject.detailedDescription}</p>
            </div>
            <div className="modal-section">
              <span className="modal-label">–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó:</span>
              <div className="modal-technologies">
                {selectedProject.technologies.map((tech, index) => (
                  <span key={index} className="tech-tag">
                    {tech}
                  </span>
                ))}
              </div>
            </div>
            <div className="modal-section">
              <span className="modal-label">–ö–æ–º–∞–Ω–¥–∞:</span>
              <div className="modal-programmers">
                {selectedProject.programmers.map((programmer, index) => (
                  <span key={index} className="programmer-tag">
                    {programmer}
                  </span>
                ))}
              </div>
            </div>
            <div className="modal-section">
              <span className="modal-label">–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É:</span>
              <span>{selectedProject.startDate}</span>
            </div>
            <div className="modal-section">
              <span className="modal-label">–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è:</span>
              <span>{selectedProject.endDate}</span>
            </div>
            <div className="modal-section">
              <span className="modal-label">–ë—é–¥–∂–µ—Ç:</span>
              <span>{selectedProject.budget}</span>
            </div>
            <div className="modal-section">
              <span className="modal-label">–ö–ª—ñ—î–Ω—Ç:</span>
              <span>{selectedProject.client}</span>
            </div>
          </div>
        </div>
      )}

      {showCreateModal && (
        <div className="modal-overlay" onClick={closeCreateModal}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <button className="modal-close" onClick={closeCreateModal}>
              <FaTimes size={20} />
            </button>
            <h2 className="modal-title">–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–æ—î–∫—Ç</h2>
            <form onSubmit={createProject} className="create-form">
              <div className="modal-section">
                <label className="modal-label">–ù–∞–∑–≤–∞:</label>
                <input
                  name="name"
                  value={newProject.name}
                  onChange={handleInputChange}
                  required
                  className="modal-input"
                />
              </div>
              <div className="modal-section">
                <label className="modal-label">–°—Ç–∞—Ç—É—Å:</label>
                <select
                  name="status"
                  value={newProject.status}
                  onChange={handleInputChange}
                  className="modal-input"
                >
                  <option value="Active">Active</option>
                  <option value="In Progress">In Progress</option>
                  <option value="Completed">Completed</option>
                </select>
              </div>
              <div className="modal-section">
                <label className="modal-label">–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó (—á–µ—Ä–µ–∑ –∫–æ–º—É):</label>
                <input
                  name="technologies"
                  value={newProject.technologies}
                  onChange={handleInputChange}
                  placeholder="React, TypeScript"
                  className="modal-input"
                />
              </div>
              <div className="modal-section">
                <label className="modal-label">–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å:</label>
                <textarea
                  name="description"
                  value={newProject.description}
                  onChange={handleInputChange}
                  className="modal-textarea"
                />
              </div>
              <div className="modal-section">
                <label className="modal-label">–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ (—á–µ—Ä–µ–∑ –∫–æ–º—É):</label>
                <input
                  name="programmers"
                  value={newProject.programmers}
                  onChange={handleInputChange}
                  placeholder="–û–ª–µ–≥ –ü–µ—Ç—Ä–µ–Ω–∫–æ, –ú–∞—Ä—ñ—è –Ü–≤–∞–Ω–æ–≤–∞"
                  className="modal-input"
                />
              </div>
              <div className="modal-section">
                <label className="modal-label">–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É:</label>
                <input
                  name="startDate"
                  type="date"
                  value={newProject.startDate}
                  onChange={handleInputChange}
                  className="modal-input"
                />
              </div>
              <div className="modal-section">
                <label className="modal-label">–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è:</label>
                <input
                  name="endDate"
                  type="date"
                  value={newProject.endDate}
                  onChange={handleInputChange}
                  className="modal-input"
                />
              </div>
              <div className="modal-section">
                <label className="modal-label">–ë—é–¥–∂–µ—Ç:</label>
                <input
                  name="budget"
                  value={newProject.budget}
                  onChange={handleInputChange}
                  placeholder="$50,000"
                  className="modal-input"
                />
              </div>
              <div className="modal-section">
                <label className="modal-label">–ö–ª—ñ—î–Ω—Ç:</label>
                <input
                  name="client"
                  value={newProject.client}
                  onChange={handleInputChange}
                  className="modal-input"
                />
              </div>
              <div className="modal-section">
                <label className="modal-label">–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å:</label>
                <textarea
                  name="detailedDescription"
                  value={newProject.detailedDescription}
                  onChange={handleInputChange}
                  className="modal-textarea"
                />
              </div>
              <button type="submit" className="submit-button">
                –°—Ç–≤–æ—Ä–∏—Ç–∏
              </button>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default Projects;